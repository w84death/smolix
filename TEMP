

; ; System call table
; SYS                 equ 0x0100  ; Position of the router in the kernel
; SYS_RESET           equ 0x0000
; SYS_DOWN            equ 0x0003
; SYS_VER             equ 0x0006
; SYS_PRINT_CHR       equ 0x0009
; SYS_PRINT_STR       equ 0x000C
; SYS_SET_COLOR       equ 0x000F
; SYS_LOAD_GLYPH      equ 0x0012
; SYS_LOAD_ALL_GLYPHS equ 0x0015
; SYS_DRAW_GLYPH      equ 0x0018
; SYS_DRAW_GLYPH_LONG equ 0x001B
; SYS_DRAW_WINDOW     equ 0x001E
; SYS_GET_KEY         equ 0x0021

; ; System call router
; ; This is the system call router. It is a jump table that
; ; redirects system calls to the appropriate function.
; ; Expects: None
; ; Returns: None
; os_call_router:
;     jmp near os_reset
;     jmp near os_down
;     jmp near os_print_ver
;     jmp near os_print_chr
;     jmp near os_print_str
;     jmp near os_set_color
;     jmp near os_load_glyph
;     jmp near os_load_all_glyphs
;     jmp near os_draw_glyph
;     jmp near os_draw_glyph_long
;     jmp near os_draw_window
;     jmp near os_get_key



  ; .scroll_up:
  ;   ; Scroll up if not at beginning
  ;   cmp word [os_fs_file_pos], 0
  ;   je .nav_loop           ; Already at top, ignore
  ;   sub word [os_fs_file_pos], 160 ; Decrease by screen width*2 for one line
  ;   call .display_file_content
  ;   jmp .nav_loop
    
  ; .scroll_down:
  ;   ; Scroll down if not at end
  ;   add word [os_fs_file_pos], 160 ; Increase by screen width*2 for one line
  ;   ; We would need to check if we're at the end of the file here
  ;   ; For simplicity, we're just allowing scrolling within buffer limits
  ;   call .display_file_content
  ;   jmp .nav_loop